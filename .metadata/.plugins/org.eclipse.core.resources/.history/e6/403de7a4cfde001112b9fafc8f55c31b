package edu.gatech.GradeAwesome.FileIO;

import java.io.File;
import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.tools.Diagnostic;
import javax.tools.DiagnosticCollector;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.StandardLocation;
import javax.tools.ToolProvider;

public class JavaFile extends SmartFile {

	public JavaFile(File f) {
		super(f);
	}

	public JavaFile(String s) {
		super(s);
	}

	public boolean compile(Writer writer) {
		if (this.isCompilable()) {
			JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
			DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();
			StandardJavaFileManager fm = compiler.getStandardFileManager(diagnostics, null, null);
			List<File> dir = new ArrayList<File>();
			dir.add(new File(this.getAbsolutePath().substring(0, this.getAbsolutePath().lastIndexOf('/'))));
			try {
				fm.setLocation(StandardLocation.CLASS_PATH, dir);
			} catch (IOException e1) {
				e1.printStackTrace();
			}
			ArrayList<File> file = new ArrayList<File>(1);
			file.add(this);
			JavaCompiler.CompilationTask task = null;
			task = compiler.getTask(writer, fm, diagnostics, null, null, fm.getJavaFileObjectsFromFiles(file));

			boolean success = task.call();
			if (success) {
				return true;
			} else {
				JOptionPane.showMessageDialog(null, "Compilation not succesful", "Compilation error",
						JOptionPane.ERROR_MESSAGE);
				for (Diagnostic<? extends JavaFileObject> d : diagnostics.getDiagnostics())
					try {
						writer.append(d.toString());
						System.err.println(d.toString());
					} catch (IOException e) {
						e.printStackTrace();
					}
				return false;
			}
		} else
			return false;
	}

	public static boolean compile(ArrayList<SmartFile> files, Writer writer) {
		List<File> dir = new ArrayList<File>();
		for (SmartFile sm : files) {
			if (!sm.isCompilable())
				return false;
			else
				dir.add(new File(sm.getAbsolutePath().substring(0, sm.getAbsolutePath().lastIndexOf('/'))));
		}
		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
		DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();
		StandardJavaFileManager fm = compiler.getStandardFileManager(diagnostics, null, null);

		try {
			fm.setLocation(StandardLocation.CLASS_PATH, dir);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		JavaCompiler.CompilationTask task = null;
		task = compiler.getTask(writer, fm, diagnostics, null, null, fm.getJavaFileObjectsFromFiles(files));

		boolean success = task.call();
		if (success) {
			return true;
		} else {
			JOptionPane.showMessageDialog(null, "Compilation not succesful", "Compilation error", JOptionPane.ERROR_MESSAGE);
			for (Diagnostic<? extends JavaFileObject> d : diagnostics.getDiagnostics())
				try {
					writer.append(d.toString());
					System.err.println(d.toString());
				} catch (IOException e) {
					e.printStackTrace();
				}
			return false;
		}
	}

}
