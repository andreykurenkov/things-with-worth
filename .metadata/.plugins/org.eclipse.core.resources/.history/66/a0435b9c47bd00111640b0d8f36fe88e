import java.awt.Dimension;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.OutputStreamWriter;
import java.util.ArrayList;

import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTabbedPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.text.JTextComponent;

public class FileBrowser extends JPanel {
	// TODO: getting a bit huge. Maybe split-upable? ALso figoure out how
	// weights are actuall supposed to be used?
	private final String exten = "Submission Attachment(s)";
	private JList dirChooser, fileChooser;
	private File currentDir;
	private String baseDir;
	private JButton view, compile, run, viewAll, compileAll, runAll, tabClose;
	private ArrayList<SmartFile> currentFiles;
	private JTabbedPane filePane;
	private final double weightDominant = 10;
	private final double weightDemanded = 0.1;
	private final double weightNormal = 1;
	public static final int[] mnemonics = { KeyEvent.VK_1, KeyEvent.VK_2, KeyEvent.VK_3, KeyEvent.VK_4, KeyEvent.VK_5,
			KeyEvent.VK_6, KeyEvent.VK_7, KeyEvent.VK_8, KeyEvent.VK_9, KeyEvent.VK_0 };

	public FileBrowser(Dimension dim, final JTabbedPane fileDisplay) {
		filePane = fileDisplay;
		currentFiles = new ArrayList<SmartFile>();
		fileChooser = new JList();
		fileChooser.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		fileChooser.setLayoutOrientation(JList.VERTICAL);

		dirChooser = new JList();
		dirChooser.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
		dirChooser.setLayoutOrientation(JList.VERTICAL);
		dirChooser.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				if (dirChooser.getSelectedIndex() == -1) {
					currentDir = null;
					fileChooser.setListData(new File[0]);
				} else {
					FileBrowser.this.updateFiles();
				}
			}
		});

		fileChooser.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				currentFiles = new ArrayList<SmartFile>();
				Object[] files = fileChooser.getSelectedValues();
				boolean readable, compilable, runnable;
				readable = compilable = runnable = files.length > 0;
				for (Object o : files) {
					SmartFile cur = (SmartFile) o;
					currentFiles.add(cur);
					if (!cur.isReadable()) {
						readable = false;
					}
					if (!cur.isRunnable()) {
						runnable = false;
					}
					if (!cur.isCompilable()) {
						compilable = false;
					}

				}
				view.setEnabled(readable);
				compile.setEnabled(compilable);
				run.setEnabled(runnable);
			}

		});
		JScrollPane dirChooserScroller = new JScrollPane(dirChooser);
		JScrollPane fileChooserScroller = new JScrollPane(fileChooser);

		dirChooserScroller.setPreferredSize(new Dimension((int) dim.getWidth() / 2, (int) dim.getHeight()));
		fileChooserScroller.setPreferredSize(new Dimension((int) dim.getWidth() / 2, (int) dim.getHeight()));
		this.setLayout(new GridBagLayout());
		GridBagConstraints c = ConstraintsHelper.makeConstraints(0, 0, GridBagConstraints.BOTH, weightDominant,
				weightDominant, GridBagConstraints.RELATIVE, GridBagConstraints.RELATIVE, GridBagConstraints.WEST);
		this.add(dirChooserScroller, c);
		c = ConstraintsHelper.makeConstraints(1, 0, GridBagConstraints.BOTH, weightNormal, weightDemanded,
				GridBagConstraints.RELATIVE, GridBagConstraints.REMAINDER, GridBagConstraints.WEST);// Make
																									// visible?
		JSeparator sepv = new JSeparator(JSeparator.VERTICAL);
		sepv.setVisible(true);
		sepv.setEnabled(true);
		// this.add(sepv, c);
		c = ConstraintsHelper.makeConstraints(0, 1, GridBagConstraints.BOTH, weightNormal, weightDemanded,
				GridBagConstraints.RELATIVE, GridBagConstraints.RELATIVE, GridBagConstraints.WEST);
		JSeparator seph = new JSeparator(JSeparator.HORIZONTAL);
		seph.setVisible(true);
		seph.setEnabled(true);
		this.add(seph, c);
		c = ConstraintsHelper.makeConstraints(0, 2, GridBagConstraints.BOTH, weightNormal, weightDemanded,
				GridBagConstraints.RELATIVE, GridBagConstraints.REMAINDER, GridBagConstraints.WEST);
		BackResetNextButtons brn = new BackResetNextButtons(true, true);
		brn.setResetText("load");
		brn.addResetActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO
			}

		});

		brn.addNextActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				dirChooser.setSelectedIndex((dirChooser.getSelectedIndex() + 1) % (dirChooser.getLastVisibleIndex() + 1));
			}
		});
		brn.addBackActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				dirChooser.setSelectedIndex((Math.abs(dirChooser.getSelectedIndex() - 1)));
			}
		});

		this.add(brn, c);

		c = ConstraintsHelper.makeConstraints(2, 0, GridBagConstraints.BOTH, weightDominant, weightDemanded,
				GridBagConstraints.REMAINDER, GridBagConstraints.RELATIVE, GridBagConstraints.WEST);
		this.add(fileChooserScroller, c);
		this.add(new JSeparator(),
				ConstraintsHelper.makeConstraints(2, 1, GridBagConstraints.HORIZONTAL, weightDemanded, weightDemanded));
		JPanel buttonPanel = new JPanel();
		buttonPanel.setLayout(new GridLayout(3, 2));
		buttonPanel.setPreferredSize(new Dimension((int) dim.getWidth() / 4, (int) dim.getHeight() / 6));
		view = new JButton("Read");
		viewAll = new JButton("Read All");
		view.addActionListener(new ViewListener(false));
		viewAll.addActionListener(new ViewListener(true));
		buttonPanel.add(view);
		buttonPanel.add(viewAll);

		compile = new JButton("Compile");
		compileAll = new JButton("Compile All");
		compile.addActionListener(new CompileListener(false));
		compileAll.addActionListener(new CompileListener(true));
		buttonPanel.add(compile);
		buttonPanel.add(compileAll);

		run = new JButton("Run");
		runAll = new JButton("Run All");
		run.addActionListener(new RunListener(false));
		runAll.addActionListener(new RunListener(true));
		buttonPanel.add(run);
		buttonPanel.add(runAll);

		c = ConstraintsHelper.makeConstraints(2, 2, GridBagConstraints.BOTH, weightDominant, weightDemanded,
				GridBagConstraints.REMAINDER, GridBagConstraints.REMAINDER, GridBagConstraints.SOUTH);
		this.add(buttonPanel, c);

	}

	public void setBaseDir(String set) {
		baseDir = set;
	}

	public File getBaseDir() {
		return new File(baseDir);
	}

	public void setStudents(Student[] setTo) {
		dirChooser.setListData(setTo);
	}

	private void updateFiles() {
		Student selected = (Student) dirChooser.getSelectedValue();
		String dir = selected.getName() + "(" + selected.getID() + ")/" + exten;
		currentDir = new File(baseDir + "/" + dir);
		if (currentDir.listFiles() == null)
			JOptionPane.showMessageDialog(this, "Not a valid directory!\nMust contain unzipped HW folder.",
					"Directory error", JOptionPane.ERROR_MESSAGE);
		else
			fileChooser.setListData(SmartFile.makeSmarter(currentDir.listFiles()));
	}

	public JButton getTabCloseButton() {
		if (tabClose == null) {
			tabClose = new JButton("Close tabs");
			tabClose.setVisible(false);
			tabClose.setEnabled(false);
			tabClose.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent arg0) {
					int tabCount = filePane.getTabCount();
					for (int i = tabCount - 1; i >= 0; i--) {
						if (filePane.getTabComponentAt(i).toString().contains(".java"))
							filePane.removeTabAt(i);
					}
					tabClose.setVisible(false);
					tabClose.setEnabled(false);
				}

			});
		}
		return tabClose;

	}

	private class CompileListener implements ActionListener {
		private boolean all;

		public CompileListener(boolean all) {
			this.all = all;
		}

		@Override
		public void actionPerformed(ActionEvent e) {
			ArrayList<SmartFile> toCompile = currentFiles;
			if (all) {
				ArrayList<SmartFile> files = new ArrayList<SmartFile>();
				for (File f : currentDir.listFiles()) {
					SmartFile sm = new SmartFile(f);
					if (sm.isCompilable())
						files.add(sm);
				}
				toCompile = files;
			}
			SmartFile.compile(toCompile, new OutputStreamWriter(System.err));
			FileBrowser.this.updateFiles();
		}

	}

	private class ViewListener implements ActionListener {
		private boolean all;

		public ViewListener(boolean all) {
			this.all = all;
		}

		@Override
		public void actionPerformed(ActionEvent e) {
			ArrayList<SmartFile> toView = currentFiles;
			if (all) {
				ArrayList<SmartFile> files = new ArrayList<SmartFile>();
				for (File f : currentDir.listFiles()) {
					SmartFile sm = new SmartFile(f);
					if (sm.isReadable())
						files.add(sm);
				}
				toView = files;
			}
			int i = filePane.getTabCount();
			if (toView.size() > 0) {
				tabClose.setEnabled(true);
				tabClose.setVisible(true);
			}
			for (SmartFile file : toView) {
				String contents = file.read();
				if (contents != null) {
					JTextComponent text = file.getVisibleText(false);
					text.setCaretPosition(0);
					JScrollPane pane = new JScrollPane(text);
					JScrollBar vertical = pane.getVerticalScrollBar();
					InputMap im = vertical.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
					im.put(KeyStroke.getKeyStroke((char) KeyEvent.VK_DOWN), "positiveUnitIncrement");
					im.put(KeyStroke.getKeyStroke((char) KeyEvent.VK_UP), "negativeUnitIncrement");
					filePane.addTab(text.getName(), pane);
					filePane.setSelectedComponent(pane);
					int tabCount = filePane.getTabCount();
					if (tabCount <= 10) {
						filePane.setMnemonicAt(tabCount - 1, mnemonics[tabCount - 1]);
					}
				}
			}
			for (; i < filePane.getTabCount(); i++) {
				filePane.setTabComponentAt(i, new TabCloseComponent(filePane));
			}

		}
	}

	private class RunListener implements ActionListener {
		private boolean all;

		public RunListener(boolean all) {
			this.all = all;
		}

		@Override
		public void actionPerformed(ActionEvent e) {
			ArrayList<SmartFile> toRun = currentFiles;
			if (all) {
				ArrayList<SmartFile> files = new ArrayList<SmartFile>();
				for (File f : currentDir.listFiles()) {
					SmartFile sm = new SmartFile(f);
					if (sm.isRunnable())
						files.add(sm);
				}
				toRun = files;
			}

			for (SmartFile file : toRun) {
				file.run();
				for (Frame frame : JFrame.getFrames()) {
					if (!frame.getName().equals(MainFrame.frameName) && frame instanceof JFrame)
						((JFrame) frame).setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
				}
			}
		}

	}
}
