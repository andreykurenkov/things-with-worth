import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

/**
 * An abstract class whose only purpose in life is to run Kruskal's algorithm.
 * 
 * @author
 * 
 */
public abstract class MST {

	/**
	 * Run kruskal's algorithm on the given EdgeList and return a collection of
	 * edges.
	 * 
	 * @param edges
	 * @return
	 */
	public static Collection<Edge> kruskal(EdgeList edges) {
		ArrayList<Edge> builtEdges=new ArrayList<Edge>();
		Iterator<Edge> iterator=edges.iterator();
		DisjointSets sets=new DisjointSets(edges.getVertices());
		while(iterator.hasNext()){
			Edge currentEdge= iterator.next();
			System.out.println(currentEdge);
			Vertex[] uvVertex=currentEdge.vertices();
			if(!sets.sameSet(uvVertex[0], uvVertex[1])){
				builtEdges.add(currentEdge);
				sets.merge(uvVertex[0], uvVertex[1]);
			}
			else
				sets.setRoot(uvVertex[0], uvVertex[1]);
		}
		return builtEdges;
	}

}
