package edu.gatech.GradeAwesome;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;

import edu.gatech.GradeAwesome.FileIO.ConfigManager;
import edu.gatech.GradeAwesome.GUI.FileBrowser;
import edu.gatech.GradeAwesome.GUI.GradingPanel;
import edu.gatech.GradeAwesome.GUI.NewUserDisplay;
import edu.gatech.GradeAwesome.GUI.Components.TextStdIOPane;
import edu.gatech.GradeAwesome.GUI.Helpers.ConstraintsHelper;
import edu.gatech.GradeAwesome.Model.Configuration;
import edu.gatech.GradeAwesome.Model.StudentSet;

//TODO: config file with init dir, etc.
//TODO: Menus with help, configure, some other stuff. 
//TODO: figure out how to handle/prevent System.exit on not just JFrames
//TODO: compile all (recursive traverse from base dir, compile all compilable)
//TODO: better more consistent error handling strategy...
public class MainFrame {
	public final static Dimension INIT_FRAME_DIM = new Dimension(1200, 1000);// TODO:make based on screen size?
	private static final double horizontalRatio = 0.5;
	private static final double verticalRatio = 0.001;
	public static final String frameName = "main";

	public static void main(String[] args) {
		ConfigManager loader = ConfigManager.getInstance();
		Configuration config = loader.load();
		final JFrame myFrame = new JFrame("CS1331 HW grader");
		myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		myFrame.setName(frameName);
		myFrame.setLayout(new GridBagLayout());
		myFrame.setPreferredSize(INIT_FRAME_DIM);
		File tempBaseDir = null;
		if (config == null) {
			config = new Configuration();
			tempBaseDir = NewUserDisplay.introduceAndGetFiles(INIT_FRAME_DIM, config);
		} else {
			tempBaseDir = config.getBaseDir();
			if (config.getShowIntro())
				NewUserDisplay.introduce(myFrame, true, config);
			if (tempBaseDir == null)// For whatever weird reason
				tempBaseDir = NewUserDisplay.getDirFile(myFrame);
		}

		StudentSet mySet = config.getStudentSet();
		if (mySet == null)
			NewUserDisplay.getStudentsFile(myFrame, mySet, config);
		mySet = config.getStudentSet();
		config.setBaseDir(tempBaseDir);
		loader.save(config);
		final File startDir = tempBaseDir;
		JPanel dirPanel = new JPanel();

		dirPanel.setPreferredSize(new Dimension((int) INIT_FRAME_DIM.getWidth(),
				(int) (INIT_FRAME_DIM.getHeight() * (1 - verticalRatio))));
		final JTabbedPane tabsPane = new JTabbedPane();

		final FileBrowser browser = new FileBrowser(new Dimension((int) (INIT_FRAME_DIM.getWidth() * horizontalRatio),
				(int) (INIT_FRAME_DIM.getHeight() * 1 - verticalRatio)), tabsPane, config);
		browser.setStudents(mySet.getSet());
		final JLabel folderLabel = new JLabel("Current dir is: " + startDir.getAbsolutePath());
		JButton folderChooseButton = new JButton("set folder");
		final GradingPanel grading = new GradingPanel(mySet.getSet());
		grading.setSaveDir(startDir);
		grading.setLoadDir(startDir);
		grading.setSaveLoadName("_Grades.txt");
		final JScrollPane scrollGrading = new JScrollPane(grading);
		// current dir
		folderChooseButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				JFileChooser chooser = new JFileChooser();
				chooser.setCurrentDirectory(startDir);
				chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
				int returnVal = chooser.showOpenDialog(myFrame);
				if (returnVal == JFileChooser.APPROVE_OPTION) {
					try {
						File chosen = chooser.getSelectedFile();
						grading.setSaveDir(chosen);
						grading.setLoadDir(chosen);
						browser.setBaseDir(chosen.getAbsolutePath());
						folderLabel.setText("Current dir is: " + chosen.getAbsoluteFile());
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		});
		dirPanel.add(folderLabel);
		dirPanel.add(folderChooseButton);

		final JButton seperateGrading = new JButton("Seperate grading view");
		seperateGrading.addActionListener(new ActionListener() {
			JFrame current;

			@Override
			public void actionPerformed(ActionEvent arg0) {
				if (seperateGrading.getText().equals("Seperate grading view")) {
					seperateGrading.setText("Tab grading view");
					JFrame gradingFrame = new JFrame("Grading window");
					gradingFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
					gradingFrame.add(scrollGrading);
					current = gradingFrame;
					current.pack();
					current.setVisible(true);
				} else {
					tabsPane.add(scrollGrading, "Grades", 2);
					current.dispose();
					seperateGrading.setText("Seperate grading view");
				}

			}

		});
		dirPanel.add(seperateGrading);

		// int x, int y, int fill, double weightx, double weighty, int width,
		// int height, int anchor
		GridBagConstraints c = ConstraintsHelper.makeConstraints(0, 0, GridBagConstraints.HORIZONTAL, 0.0, verticalRatio,
				GridBagConstraints.REMAINDER, 1, GridBagConstraints.NORTH);
		myFrame.add(dirPanel, c);
		c = ConstraintsHelper.makeConstraints(0, 1, GridBagConstraints.HORIZONTAL, 0.0, verticalRatio / 10,
				GridBagConstraints.REMAINDER, 1, GridBagConstraints.NORTH);
		myFrame.add(new JSeparator(), c);
		c = ConstraintsHelper.makeConstraints(0, 2, GridBagConstraints.BOTH, horizontalRatio, 1 - verticalRatio,
				GridBagConstraints.RELATIVE, GridBagConstraints.REMAINDER, GridBagConstraints.WEST);
		myFrame.add(browser, c);
		JButton tabClose = browser.getTabCloseButton();
		dirPanel.add(tabClose);
		TextStdIOPane readArea = TextStdIOPane.getInstance();
		tabsPane.add("IO/Status", readArea);
		tabsPane.setMnemonicAt(0, KeyEvent.VK_I);
		JTextArea current = new JTextArea();
		JScrollPane scrollCurrent = new JScrollPane(current);
		tabsPane.add("Current", scrollCurrent);
		tabsPane.setMnemonicAt(1, KeyEvent.VK_C);
		browser.setAlwaysRead(current);
		tabsPane.add("Grades", scrollGrading);
		tabsPane.setMnemonicAt(2, KeyEvent.VK_G);
		tabsPane.setSelectedIndex(0);
		c = ConstraintsHelper.makeConstraints(1, 2, GridBagConstraints.BOTH, 1 - horizontalRatio, 1 - verticalRatio,
				GridBagConstraints.REMAINDER, GridBagConstraints.RELATIVE, GridBagConstraints.EAST);

		myFrame.add(tabsPane, c);
		myFrame.pack();

		myFrame.setVisible(true);

	}
}
