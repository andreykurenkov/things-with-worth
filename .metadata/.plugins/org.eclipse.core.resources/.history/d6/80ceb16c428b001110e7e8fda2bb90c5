package edu.gatech.geochat;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.opengl.GLSurfaceView;

public class RadarRenderer implements GLSurfaceView.Renderer {

	private FloatBuffer testLine;
	private RadarView myView;
	public RadarRenderer(RadarView view){
		myView=view;
	}
	
	@Override
	public void onDrawFrame(GL10 gl) {
		
		
		    
		gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
		
		gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
		gl.glColor4f(0.63671875f, 0.76953125f, 0.22265625f, 0.0f);
		gl.glLineWidthx(10);
		gl.glVertexPointer(3, GL10.GL_FLOAT, 0, testLine);
        gl.glDrawArrays(GL10.GL_TRIANGLES, 0, 3);
		
		gl.glEnable(gl.GL_LINE_SMOOTH);
		gl.glHint(gl.GL_LINE_SMOOTH_HINT,  gl.GL_NICEST);
	}

	@Override
	public void onSurfaceChanged(GL10 gl, int width, int height) {
        gl.glViewport(0, 0, width, height);
        float ratio = (float) width / height;
	    gl.glMatrixMode(GL10.GL_PROJECTION);        // set matrix to projection mode
        gl.glLoadIdentity();                        // reset the matrix to its default state
        gl.glFrustumf(-ratio, ratio, -1, 1, 3, 7);  // apply the projection matrix
	}

	
	@Override
	public void onSurfaceCreated(GL10 gl, EGLConfig config) {
		gl.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
		float[] linecords= new float[] {
                -.5f, -.5f, 0,
                 .5f, -.5f, 0,
                  0f,  .5f, 0
        };
		
		ByteBuffer vbb = ByteBuffer.allocateDirect(linecords.length*4);
		vbb.order(ByteOrder.nativeOrder());
		testLine = vbb.asFloatBuffer();
		testLine.put(linecords);
		testLine.position(0);
	}
	
	
}

/*
private FloatBuffer testTriangle;

@Override
public void onDrawFrame(GL10 gl) {
        gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
        
        gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
        gl.glColor4f(0.63671875f, 0.76953125f, 0.22265625f, 0.0f);
        gl.glVertexPointer(3, GL10.GL_FLOAT, 0, testTriangle);
        gl.glDrawArrays(GL10.GL_TRIANGLES, 0, 3);
}

@Override
public void onSurfaceChanged(GL10 gl, int width, int height) {
gl.glViewport(0, 0, width, height);
        
}

@Override
public void onSurfaceCreated(GL10 gl, EGLConfig config) {
        gl.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        
        float[] tricords = new float[] {
                -.5f, -.5f, 0,
                 .5f, -.5f, 0,
                  0f,  .5f, 0
        };
        ByteBuffer vbb = ByteBuffer.allocateDirect(tricords.length*4);
        vbb.order(ByteOrder.nativeOrder());
        testTriangle = vbb.asFloatBuffer();
        testTriangle.put(tricords);
        testTriangle.position(0);
}


}
*/
