package edu.gatech.fiveminutesleft.model;

import edu.gatech.fiveminutesleft.cache.CacheManager;
import edu.gatech.fiveminutesleft.storage.exception.ObjectNotFoundException;

public interface Account {

	/**
	 * Locates the account in storage or in cache
	 * 
	 * @param username
	 *            the username of the account to look up
	 * @return the StandardAccount if it is in storage, null otherwise
	 */
	public static AppAccount locate(String username) {

		if (!AppAccount.exists(username)) {
			return null;
		}

		try {
			return new AppAccount(username);
		} catch (ObjectNotFoundException e) {
			return null;
		}
	}

	/**
	 * Deletes Account from storage.
	 */
	public void delete() {
		myCache.delete();
	}

	/**
	 * Returns the lists that belong to this account
	 * 
	 * @return the accounts AccountTaskLists
	 */
	public AppAccountLists getLists() {
		return myLists;
	}

	/**
	 * Checks for the existence of an account with the given username
	 * 
	 * @param username
	 *            the Account's username
	 * @return true if the Account with the given username has been created
	 */
	public static boolean exists(String username);
	
	/**
	 * Returns the lists that belong to this account
	 * 
	 * @return the accounts AccountTaskLists
	 */
	public AccountLists getLists();

	/**
	 * Returns the user's real name
	 * 
	 * @return
	 */
	public String getRealName();

	/**
	 * Sets the user's real name
	 * 
	 * @param name
	 */
	public void setRealName(String name);

	/**
	 * Getter for the account username.
	 * 
	 * @return username
	 */
	public String getUsername();

	/**
	 * @param password
	 *            Password attempt
	 * @return True if the given password is the password for this account.
	 */
	public boolean isPassword(String password);

	/**
	 * Getter for the email of the account
	 * 
	 * @return the email
	 */
	public String getEmail();

	/**
	 * Sets the user's email
	 * 
	 * @param email
	 */
	public String setEmail(String email);

	/**
	 * Changes the stored password for this account to the hashed value of the provided password
	 * 
	 * @param newPassword
	 *            the new unhashed password for this account
	 * @return null on success, error code otherwise
	 */
	public String setPassword(String newPassword);

	/**
	 * Add a non-specific configuration with the type being the key and the set option the
	 * associated value
	 * 
	 * @param key
	 *            the name of the setting or
	 * @param value
	 *            value to correspond to key
	 * @return null on success, error code otherwise
	 */
	public String addSetting(String key, String value);

}
