import java.io.File;
import java.io.FileNotFoundException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.Scanner;

import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.JTextComponent;

public class SmartFile extends File {

	public String getName() {
		return super.getName();
	}

	public SmartFile(String path) {
		super(path);
	}

	public String toString() {
		return this.getName();
	}

	public boolean isCompilable() {
		return this.getName().endsWith(".java");
	}

	public boolean isRunnable() {
		String name = this.getName();
		int index = 0;
		if ((index = name.indexOf('.')) <= 0)
			return false;
		if (!name.substring(index).equals(".class"))
			return false;
		try {
			URL[] load = { new File(this.getAbsolutePath().substring(0, this.getAbsolutePath().indexOf(this.getName())))
					.toURI().toURL() };
			URLClassLoader loader = new URLClassLoader(load);
			Class<?> myClass = loader.loadClass(this.getNonExtensionName());
			myClass.getMethod("main", String[].class);
		} catch (MalformedURLException e2) {
			e2.printStackTrace();
			return false;
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			return false;
		} catch (SecurityException e) {
			e.printStackTrace();
			return false;
		} catch (NoSuchMethodException e) {
			return false;
		}
		return true;

	}

	public boolean isReadable() {
		return this.canRead();
	}

	public String getNonExtensionName() {
		String name = this.getName();
		int index = 0;
		if ((index = name.indexOf('.')) > 0)
			return name.substring(0, index);
		return this.getName();
	}

	public void run() {
		if (this.isRunnable()) {
			try {
				URL[] load = { new File(this.getAbsolutePath().substring(0, this.getAbsolutePath().indexOf(this.getName())))
						.toURI().toURL() };
				URLClassLoader loader = new URLClassLoader(load);
				Class<?> myClass = loader.loadClass(this.getNonExtensionName());
				Method main = myClass.getMethod("main", String[].class);
				main.invoke(null, new Object[1]);
			} catch (MalformedURLException e2) {
				e2.printStackTrace();
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			} catch (SecurityException e) {
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				e.printStackTrace();
			}
		} else
			System.err.println("Cannot run this file!");
	}

	public String read() {
		if (this.canRead()) {
			Scanner scan = null;
			try {
				scan = new Scanner(this);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
			String res = "";
			String line = "";
			while (scan.hasNextLine())
				if ((line = scan.nextLine()) != null && line.length() > 0)
					res += line + "\n";
			return res;
		} else
			return null;
	}

	public JTextComponent getVisibleText(boolean editable) {
		JTextArea area = new JTextArea();
		area.setEditable(editable);
		area.setText(this.read());
		area.setName(this.getName());
		return area;
	}

	public static SmartFile[] makeSmarter(File[] stupid) {
		SmartFile[] smart = new SmartFile[stupid.length];
		for (int i = 0; i < stupid.length; i++)
			smart[i] = new SmartFile(stupid[i].getAbsolutePath());
		return smart;
	}
}
