import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Polygon;
import java.awt.Rectangle;

/**
 * This class represents a ship in space.
 * 
 * @author Elizabeth Johnson, Andrey K.
 * @version 1.1
 */
public class Ship {
	public static final double MAX_VEL = Math.PI / 2;
	private Vector2D pos, vel;
	private final static double bulletSpeedRatio = 5;
	private double rotation;
	private final double dR = Math.PI / 10;
	private final double dV = Math.PI / 100;// why not?
	// All these bounds, vel, pos objects should be subclassing a movable object...But not there yet?
	// TODO: would make for a decent example once we get to poly/inheritance
	private Dimension bounds;

	/**
	 * Given all that needs to be known in convenient math form, creates normal Ship with starting values
	 * 
	 * @param pos
	 * @param vel
	 * @param bounds
	 */
	public Ship(Vector2D pos, Vector2D vel, Dimension bounds) {
		this(pos, vel.getX(), vel.getY(), bounds);
	}

	/**
	 * Convenience method when two Vector2D are just too many.
	 * 
	 * @param pos
	 * @param velX
	 * @param velY
	 * @param bounds
	 */
	public Ship(Vector2D pos, double velX, double velY, Dimension bounds) {
		this(pos.getX(), pos.getY(), velX, velY, bounds);
	}

	/**
	 * Base constructor - does not rely on any data structure and easily usable.
	 * 
	 * @param x
	 * @param y
	 * @param velX
	 * @param velY
	 * @param bounds
	 */
	public Ship(double x, double y, double velX, double velY, Dimension bounds) {
		pos = new Vector2D(x, y);
		vel = new Vector2D(velX, velY);
		this.bounds = bounds;
		rotation = 0;
	}

	/**
	 * Increases or decreases the velocity of this vessel.
	 * 
	 * @param acc
	 *            the acceleration
	 */
	public void accelerate(Vector2D acc) {
		Vector2D max = new Vector2D(MAX_VEL, MAX_VEL);
		Vector2D sum = vel.add(acc);
		if (sum.compareTo(max) < 0) {// Because of magnitude, this totally covers negative and positive!
			vel = sum;
		}

	}

	/**
	 * Increases or decreases rotation of this vessel by predefined amounts.
	 * 
	 * @param right
	 *            turn right?
	 */
	public void rotate(boolean right) {
		if (right)
			rotate(-dR);
		else
			rotate(dR);
	}

	/**
	 * Increases or decreases rotation of this vessel by given amount.
	 * 
	 * @param radian
	 *            how much bro?
	 */
	public void rotate(double radian) {
		rotation += radian;
	}

	/**
	 * Increases or decreases the velocity of this vessel by a predefined amount.
	 * 
	 * @param forwards
	 *            which direction bro?
	 */
	public void accelerate(boolean forwards) {
		if (forwards)
			accelerate(new Vector2D(Math.cos(rotation) * dV, Math.sin(rotation) * dV));
		else
			accelerate(new Vector2D(Math.cos(rotation) * (-dV), Math.sin(rotation) * (-dV)));
	}

	/**
	 * Moves this vessel using Physics(actually math)
	 */
	public void move() {
		pos = pos.add(vel);
		double boundX = (bounds.getWidth() + pos.getX() % bounds.getWidth()) % bounds.getWidth();
		double boundY = (bounds.getHeight() + pos.getY() % bounds.getHeight()) % bounds.getHeight();
		pos.setLocation(boundX, boundY);

	}

	/**
	 * Aggressively spews forth a bullet based on where this is and that.
	 * 
	 * @return A nice shiny new bullet
	 */
	public Bullet shoot() {

		return new Bullet(pos, new Vector2D(Math.cos(rotation) / bulletSpeedRatio, Math.sin(rotation) / bulletSpeedRatio),
				bounds);
	}

	/**
	 * Explosions in the Sky will happen, if this returns true
	 * @param a the aggresor
	 * @return if there will be pretty explosions
	 */
	public boolean crash(Asteroid a) {
		return a.collide(new Rectangle(pos.toPoint().x, pos.toPoint().y, 2, 2));
	}

	public void draw(Graphics g) {
		g.drawPolygon(makeTriangle());

		int x1 = (int) ((10) * Math.cos(rotation) - (0) * Math.sin(rotation) + pos.getX());
		int y1 = (int) ((10) * Math.sin(rotation) + (0) * Math.cos(rotation) + pos.getY());
		int x2 = (int) ((6) * Math.cos(rotation) - (0) * Math.sin(rotation) + pos.getX());
		int y2 = (int) ((6) * Math.sin(rotation) + (0) * Math.cos(rotation) + pos.getY());

		g.setColor(Color.red);
		g.drawLine(x1, y1, x2, y2);
		g.setColor(Color.black);
	}

	private Polygon makeTriangle() {
		int x1 = (int) ((8) * Math.cos(rotation) - (0) * Math.sin(rotation) + pos.getX());
		int y1 = (int) ((8) * Math.sin(rotation) + (0) * Math.cos(rotation) + pos.getY());

		int x2 = (int) ((-4) * Math.cos(rotation) - (-7) * Math.sin(rotation) + pos.getX());
		int y2 = (int) ((-4) * Math.sin(rotation) + (-7) * Math.cos(rotation) + pos.getY());

		int x3 = (int) ((-4) * Math.cos(rotation) - 7 * Math.sin(rotation) + pos.getX());
		int y3 = (int) ((-4) * Math.sin(rotation) + 7 * Math.cos(rotation) + pos.getY());

		// int xRot = (int)(x*Math.cos(rotation) - y*Math.sin(rotation));
		// int yRot = (int)(x*Math.sin(rotation) + y*Math.cos(rotation));

		Polygon p = new Polygon(new int[] { x1, x2, x3 }, new int[] { y1, y2, y3 }, 3);

		return p;
	}

}
