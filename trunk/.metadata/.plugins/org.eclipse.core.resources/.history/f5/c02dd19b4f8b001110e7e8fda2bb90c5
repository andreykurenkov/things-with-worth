package edu.gatech.geochat;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.content.Context;
import android.graphics.Point;
import android.opengl.GLSurfaceView;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;

public class RadarRenderer implements GLSurfaceView.Renderer {

	private FloatBuffer testLine;
	private FloatBuffer outerCircle;
	private FloatBuffer middleCircle;
	private FloatBuffer innerCircle;
	private RadarView myView;
	private float heightToWidth;
	public RadarRenderer(RadarView view){
		myView=view;
		heightToWidth=(float)view.getDeviceWidth()/view.getDeviceHeight();
		Log.d("RadarRenderer", "WidthToHeight"+heightToWidth);
		
		outerCircle=getCircleLines(0,0,this.getMostCircle(1));
	}
	
	@Override
	public void onDrawFrame(GL10 gl) {
		
		this.drawLine(0f,
				      0f,
				      1f*(float)Math.cos(myView.getAngle()),
			          (1f*heightToWidth)*(float)Math.sin(myView.getAngle()),
			          gl);
	
		double angle=myView.getAngle();
		
	}
	
	//(centered)
	private int getMostCircle(float percentOfWidth){
		return (int)(myView.getDeviceWidth()*2*Math.PI*percentOfWidth-1);
	}
	private void drawLine(float x1, float y1, float x2, float y2, GL10 gl){

		  float[] linecords= new float[] {
		    x1, x2,
		    x2, y2
		    };
		ByteBuffer vbb = ByteBuffer.allocateDirect(linecords.length*4);
		vbb.order(ByteOrder.nativeOrder());
		testLine = vbb.asFloatBuffer();
		testLine.put(linecords);
		testLine.position(0);
		gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
		
		gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
		gl.glColor4f(0.63671875f, 0.76953125f, 0.22265625f, 0.0f);
		gl.glLineWidthx(10);
		gl.glVertexPointer(2, GL10.GL_FLOAT, 0, testLine);
        gl.glDrawArrays(GL10.GL_LINE_STRIP, 0, 2);
		
		gl.glEnable(gl.GL_LINE_SMOOTH);
		gl.glHint(gl.GL_LINE_SMOOTH_HINT,  gl.GL_NICEST);
	}
	/**
	 * Here radius is understood to be a percentage of the screen width. 
	 * 
	 */
	private float[][] getCircleLines(float cx, float cy, float percentOfWidth, int numLines){
		float[][] lines=new float[numLines][4];
		
		for(int i=0;i<numLines;i++){
			float angle=(float)i/(numLines+1)*2*(float)Math.PI;
			float angleTwo=(float)(i+1)/(numLines+1)*2*(float)Math.PI;
			
			lines[i][0]=1f*percentOfWidth*(float)Math.cos(angle);//x1
			lines[i][1]=1f*heightToWidth*percentOfWidth*(float)Math.sin(angle);//y1
			lines[i][2]=1f*percentOfWidth*(float)Math.cos(angleTwo);//x2
			lines[i][3]=1f*heightToWidth*percentOfWidth*(float)Math.sin(angleTwo);//y2
		}
		return lines;
	}
	
	private void drawCircle(float[][] lines, GL10 gl){
		for(float[] line:lines){
			this.drawLine(line[0], line[1], line[2], line[2], gl);
		}
	}

	@Override
	public void onSurfaceChanged(GL10 gl, int width, int height) {
        gl.glViewport(0, 0, width, height);
                //supposed to make it look correct in Android 
       
		
       // float ratio = (float) width / height;
//	    gl.glMatrixMode(GL10.GL_PROJECTION);        // set matrix to projection mode
  //      gl.glFrustumf(-ratio, ratio, -1, 1, 3, 7);  // apply the projection matrix*/
	}

	
	@Override
	public void onSurfaceCreated(GL10 gl, EGLConfig config) {
		gl.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);

		float[] linecords= new float[] {
                0f, 0f, 0,
                (1f/heightToWidth), 0f, 0,
        };
		
		ByteBuffer vbb = ByteBuffer.allocateDirect(linecords.length*4);
		vbb.order(ByteOrder.nativeOrder());
		testLine = vbb.asFloatBuffer();
		testLine.put(linecords);
		testLine.position(0);
	}
	
	
}

