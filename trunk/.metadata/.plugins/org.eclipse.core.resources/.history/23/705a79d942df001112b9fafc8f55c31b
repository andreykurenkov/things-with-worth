package edu.gatech.GradeAwesome.GUI.Components;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileFilter;
import java.util.EmptyStackException;
import java.util.Stack;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileSystemView;

import edu.gatech.GradeAwesome.Observer;
import edu.gatech.GradeAwesome.FileIO.SmartDirectory;

public class DirectoryBrowser extends JPanel {
	private JFileList currentFolders;
	private JScrollPane dirScroll;
	private File currentDir;
	private Stack<File> previous;
	private Stack<File> next;
	private BackActionNextButtons previousNext;

	public DirectoryBrowser(File startDir) {
		super(new BorderLayout());
		currentDir = new SmartDirectory(startDir);
		previous = new Stack<File>();
		next = new Stack<File>();
		FileFilter dirFilter = new FileFilter() {
			@Override
			public boolean accept(File file) {
				return file.isDirectory();
			}

		};
		currentFolders = new JFileList(dirFilter, currentDir);
		previousNext = new BackActionNextButtons("Jump Dir", false);
		previousNext.getBack().setEnabled(false);
		previousNext.getNext().setEnabled(false);
		dirScroll = new JScrollPane(currentFolders);

		Observer<JFileList> changeDirObserver = new Observer<JFileList>() {
			private boolean ignore;

			@Override
			public void acceptNotification(JFileList source, Object arg) {
				if (source == null && arg == null) {
					ignore = true;
				} else {
					if (ignore) {
						ignore = false;
					} else {
						previous.add(currentDir);
						previousNext.getBack().setEnabled(true);
						currentDir = source.getCurrentDirectory();
					}
				}
			}

		};
		previousNext.getBack().addActionListener(new StackListener(previous, changeDirObserver));
		previousNext.getNext().addActionListener(new StackListener(next, changeDirObserver));

		this.add(previousNext, BorderLayout.NORTH);
		this.add(dirScroll, BorderLayout.CENTER);
	}

	public DirectoryBrowser() {
		this(FileSystemView.getFileSystemView().getHomeDirectory());
	}

	public class StackListener implements ActionListener {
		private Stack<File> theStack;
		private Observer<JFileList> observer;

		public StackListener(Stack<File> forStack, Observer<JFileList> observer) {
			this.theStack = forStack;
			this.observer = observer;
		}

		@Override
		public void actionPerformed(ActionEvent e) {
			try {
				File newDir = theStack.pop();
				if (theStack == previous) {
					next.add(newDir);
					previousNext.getNext().setEnabled(true);
					if (theStack.empty())
						previousNext.getBack().setEnabled(false);
				} else {
					previous.add(newDir);
					previousNext.getBack().setEnabled(true);
					if (theStack.empty())
						previousNext.getNext().setEnabled(false);
				}
				observer.acceptNotification(null, null);
				currentFolders.changeDirectory(newDir);
			} catch (EmptyStackException ex) {
				System.err.println("DirectoryBrowser;StackListener: back or next clicked when empty - should be disabled");
			}

		}
	}

	public class TimedSelectionListener implements ListSelectionListener {
		private int currentIndex;
		private long microInterval;
		private boolean expired;
		private Timer expireMaker;
		private TimerTask expireTask;
		private JFileList list;

		public TimedSelectionListener(JFileList list, long interval) {
			this.microInterval = interval;
			this.list = list;
			expired = true;
			expireTask = new TimerTask() {
				@Override
				public void run() {
					expired = true;
				}
			};
			expireMaker = new Timer(true);
		}

		@Override
		public void valueChanged(ListSelectionEvent event) {
			if (expired) {
				currentIndex = event.getFirstIndex();
				expired = false;
				expireMaker.schedule(expireTask, microInterval);
			} else {
				if (event.getFirstIndex() == currentIndex) {
					list.updateOpened((File) list.getSelectedValue());
					expired = true;

				} else {
					currentIndex = event.getFirstIndex();
					expired = false;
					expireMaker.cancel();
					expireMaker.schedule(expireTask, microInterval);
				}
			}
		}
	}
}
