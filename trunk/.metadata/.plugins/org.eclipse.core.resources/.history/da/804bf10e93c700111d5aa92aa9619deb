import java.awt.Color;
import java.awt.Point;
import java.util.ArrayList;

/**
 * Model representation of game of life.
 * 
 * @author Andrey
 */
public class GameOfLife {
	private Cell[][] gameField;
	private int rows, cols;
	private int generations;
	private ArrayList<Point> alive;

	public enum LifeState {
		NEW, RUNNING, PAUSED, STABLE
	};

	LifeState currentState;

	public GameOfLife(int cols, int rows, boolean[][] initState) {
		alive = new ArrayList<Point>();
		this.rows = rows;
		this.cols = cols;
		gameField = new Cell[cols][rows];
		init(initState);
		currentState = LifeState.NEW;
		generations = 0;
	}

	public GameOfLife(int cols, int rows) {
		this(cols, rows, new boolean[cols][rows]);
	}

	public void pause() {
		currentState = LifeState.PAUSED;
	}

	public void run() {
		currentState = LifeState.RUNNING;
	}

	public int getGenerations() {
		return generations;
	}

	public void update() {
		int changes = 0;
		Cell[][] newState = new Cell[cols][rows];
		for (int x = 0; x < gameField.length; x++) {
			for (int y = 0; y < gameField[x].length; y++) {
				newState[x][y] = updateCell(x, y);
				if (newState[x][y].getState() != gameField[x][y].getState())
					changes++;
			}
		}
		gameField = newState;
		if (changes == 0)
			currentState = LifeState.STABLE;
		else
			generations++;

	}

	private Cell updateCell(int x, int y) {
		Cell pertinent = gameField[x][y].clone();
		if (pertinent.isAlive()) {
			pertinent.age();
		}

		int aliveCount = 0;
		for (int checkY = boundH(y - 1); checkY != boundH(y + 2); checkY = boundH(checkY + 1)) {
			for (int checkX = boundW(x - 1); checkX != boundW(x + 2); checkX = boundW(checkX + 1)) {
				if (!(checkX == x && checkY == y) && gameField[checkX][checkY].isAlive()) {
					aliveCount++;
				}
			}
		}

		if (aliveCount <= 1 || aliveCount >= 4) {
			pertinent.kill();// killing dead cells does nothing - no need to check
		}

		if (aliveCount == 3) {
			pertinent.revive();// Reviving an alive cell does nothing - no need to check
		}

		return pertinent;
	}

	public void reset() {
		gameField = new Cell[cols][rows];
		alive=new ArrayList<Cell>();
		generations = 0;
	}

	public void switchCellState(int x, int y) {
		if (currentState == LifeState.NEW || currentState == LifeState.PAUSED) {
			Cell pertinent = gameField[x][y];
			if (pertinent.getState() == Cell.ALIVE) {
				alive.remove(pertinent.getPlace());
				pertinent.kill();
			} else {
				alive.add(pertinent.getPlace());
				pertinent.revive();
			}
		}
	}

	public int getCols() {
		return cols;
	}

	public int getRows() {
		return rows;
	}

	public void init(boolean[][] toState) {
		if (toState.length != gameField.length || toState[0].length != gameField[0].length)
			return;
		for (int x = 0; x < toState.length; x++) {
			for (int y = 0; y < toState[x].length; y++) {
				Point p = new Point(x, y);
				gameField[x][y] = new Cell(p);
				if (toState[x][y]) {
					alive.add(p);
					gameField[x][y].revive();
				}
			}
		}
	}

	public Color[][] getPrettyColors() {
		Color[][] prettyColors = new Color[cols][rows];

		for (int x = 0; x < cols; x++) {
			for (int y = 0; y < rows; y++) {
				prettyColors[x][y] = gameField[x][y].getColor();
			}
		}
		return prettyColors;
	}

	private int boundW(int getBounded) {
		return (cols + getBounded % cols) % cols;
	}

	private int boundH(int getBounded) {
		return (rows + getBounded % rows) % rows;
	}
}
