package edu.gatech.JThing.GUI;

import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.SpinnerNumberModel;

import edu.gatech.JThing.GUI.Helpers.GBHelp;
import edu.gatech.JThing.Model.Student;

//TODO: tons of stuff? (at least indication of save/load)
public class GradingPanel extends JPanel {
	private File saveDir;
	private File loadDir;
	private String saveLoadName;
	private ArrayList<StudentPanel> panels;
	private JButton save, clearAll, load;

	public GradingPanel(Student[] students) {
		this.setLayout(new GridLayout(2 + students.length, 1));
		JPanel buttonPanel = new JPanel();
		buttonPanel.setLayout(new GridLayout(1, 3));
		save = new JButton("Save");
		clearAll = new JButton("Clear all");
		load = new JButton("Load");

		save.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				if (saveDir == null) {
					// TODO:ask for dir(currently set same as time as files dir)
				}
				if (saveLoadName == null) {
					// TODO: ask for name(currently set as default Grades.txt)
				}
				save();

			}

		});

		clearAll.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				for (StudentPanel sp : panels) {// TODO: are you sure
												// JOptionPane?
					sp.grade.setValue(50);
					sp.comments.setText("");
				}
			}
		});

		load.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				if (loadDir == null) {
					// TODO:ask for dir(currently set same as time as files dir)
				}
				if (saveLoadName == null) {
					// TODO: ask for name(currently set as default Grades.txt)
				}
				load();

			}

		});

		buttonPanel.add(save);
		buttonPanel.add(clearAll);
		buttonPanel.add(load);
		this.add(buttonPanel);

		panels = new ArrayList<StudentPanel>(students.length);
		for (int i = 0; i < students.length; i++) {
			StudentPanel sp = new StudentPanel(students[i].getName());
			panels.add(sp);
			this.add(sp);
		}

	}

	public void setSaveDir(File setTo) {
		saveDir = setTo;
	}

	public void setLoadDir(File setTo) {
		loadDir = setTo;
	}

	public void setSaveLoadName(String setTo) {
		saveLoadName = setTo;
	}

	public void load() {
		// TODO: yo, safety first? Later.
		try {
			Scanner scan = new Scanner(new File(loadDir.getAbsolutePath() + saveLoadName));
			scan.useDelimiter("<<>>");
			for (int i = 0; i < panels.size(); i++) {
				String line = scan.next();
				String[] parts = line.split("<>");
				StudentPanel fill = panels.get(i);
				fill.name.setText(parts[0]);
				Integer grade = null;
				try {
					grade = Integer.parseInt(parts[1].trim());
				} catch (NumberFormatException ex) {
					// null makes it show up actually centered, unlike the GradingPanel itself being passed
					JOptionPane.showMessageDialog(null, "Error loading file - malformed grade (" + parts[1]
							+ ") not an integer.", "Load Error", JOptionPane.ERROR_MESSAGE);
				}
				fill.gradeModel.setValue(grade == null ? 50 : grade);
				fill.comments.setText(parts[2]);
				// TODO: figure out how to make it not awkwardly resize without
				// sacrificing dynamic size(resizes because of filling BOTH).

			}
		} catch (NullPointerException e) {
			JOptionPane.showMessageDialog(this, "No save file for grading is found", "No file", JOptionPane.ERROR_MESSAGE);
		} catch (FileNotFoundException e) {
			JOptionPane.showMessageDialog(this, "No save file for grading is found", "No file", JOptionPane.ERROR_MESSAGE);
		} catch (@SuppressWarnings("hiding") IOException ex) {
			JOptionPane.showMessageDialog(this, "Could not read file", "Bad file", JOptionPane.ERROR_MESSAGE);
		}
	}

	public void save() {
		// TODO: make uploadable? Would be dope.
		try {
			File saveToParsable = new File(saveDir.getAbsolutePath() + saveLoadName);
			File saveToReadable = new File(saveDir.getAbsolutePath() + "_Readable_" + saveLoadName);
			FileOutputStream out = new FileOutputStream(saveToParsable);
			FileOutputStream outRead = new FileOutputStream(saveToReadable);
			for (StudentPanel sp : panels) {
				out.write(sp.name.getText().trim().getBytes());
				outRead.write((sp.name.getText() + "\n").getBytes());
				out.write("<>".getBytes());
				// " " avoids null values
				out.write((" " + sp.gradeModel.getNumber().toString()).getBytes());
				outRead.write(("Grade: " + sp.gradeModel.getNumber().toString() + "\n").getBytes());
				out.write("<>".getBytes());
				out.write((sp.comments.getText() + " ").getBytes());
				outRead.write(("Comment: " + sp.comments.getText() + "\n\n").getBytes());
				out.write("<<>>\n".getBytes());
			}

			JOptionPane.showMessageDialog(null, "Succesfully saved ;\nfiles in current grading directory.");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private class StudentPanel extends JPanel {
		public JLabel name;// TODO: maybe not public... Eh.
		public JSpinner grade;
		public SpinnerNumberModel gradeModel;
		public JTextArea comments;
		public JScrollPane commentScroll;

		public StudentPanel(String name) {
			this.setLayout(new GridBagLayout());
			StringBuilder build = new StringBuilder();

			build.append(name);// For equals spacing
			for (int i = name.length(); i < 25; i++)
				build.append(' ');
			this.name = new JLabel(build.toString());
			Font uniformFont = new Font("Courier", Font.PLAIN, 12);
			if (uniformFont != null) {
				this.name.setFont(uniformFont);
			}

			gradeModel = new SpinnerNumberModel(50, 0, 100, 1);
			this.grade = new JSpinner(gradeModel);
			this.comments = new JTextArea(5, 30);
			comments.setEditable(true);
			commentScroll = new JScrollPane(comments);
			commentScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
			commentScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
			// below is NECESSARY for scrollbars to function
			comments.setLineWrap(true);
			GridBagConstraints constraint = GBHelp.makeConstraints(0, 0, GridBagConstraints.NONE, 1, 1,
					GridBagConstraints.RELATIVE, GridBagConstraints.RELATIVE, GridBagConstraints.WEST);
			this.add(this.name, constraint);
			constraint = GBHelp.makeConstraints(0, 1, GridBagConstraints.NONE, 1, 1, GridBagConstraints.RELATIVE,
					GridBagConstraints.REMAINDER, GridBagConstraints.WEST);
			this.add(grade, constraint);
			constraint = GBHelp.makeConstraints(1, 0, GridBagConstraints.BOTH, 1, 1,
					GridBagConstraints.REMAINDER, GridBagConstraints.REMAINDER, GridBagConstraints.EAST);
			this.add(commentScroll, constraint);
		}

		public void paint(Graphics g) {
			super.paint(g);
		}
	}
}
